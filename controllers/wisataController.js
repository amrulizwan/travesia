import Wisata from '../models/Wisata.js';
import User from '../models/User.js'; // Added import
import mongoose from 'mongoose'; // Added import

// Modified tambahWisata
export const tambahWisata = async (req, res) => {
  try {
    const { nama, deskripsi, lokasi, ticketTypes, kontak, jamOperasional, kategori, fasilitas, pengelolaId /* hargaTiket removed, ticketTypes added */ } = req.body;

    // Initial access control: only admin or pengelola can attempt to add
    if (req.user.role !== 'admin' && req.user.role !== 'pengelola') {
      return res.status(403).json({ message: 'Akses ditolak! Hanya admin atau pengelola yang dapat menambah wisata.' });
    }

    let assignedPengelolaId = req.user._id; // Default to current user

    if (req.user.role === 'admin' && pengelolaId) {
      if (!mongoose.Types.ObjectId.isValid(pengelolaId)) {
        return res.status(400).json({ message: 'Format ID Pengelola yang diberikan tidak valid.' });
      }
      const designatedPengelola = await User.findById(pengelolaId);
      if (!designatedPengelola) {
        return res.status(404).json({ message: 'User Pengelola yang ditunjuk tidak ditemukan.' });
      }
      if (designatedPengelola.role !== 'pengelola') {
        return res.status(400).json({ message: `User ${designatedPengelola.nama} bukan seorang Pengelola.` });
      }
      assignedPengelolaId = designatedPengelola._id;
    } else if (req.user.role === 'pengelola' && pengelolaId && pengelolaId.toString() !== req.user._id.toString()) {
      // If a pengelola tries to assign to another pengelola, assign to self.
      assignedPengelolaId = req.user._id;
    }

    // Validate ticketTypes
    if (!Array.isArray(ticketTypes) || ticketTypes.length === 0) {
      return res.status(400).json({ message: 'At least one ticket type must be provided.' });
    }
    for (const tt of ticketTypes) {
      if (!tt.name || typeof tt.price !== 'number' || tt.price < 0) {
        return res.status(400).json({ message: 'Each ticket type must have a valid name and non-negative price.' });
      }
      // tt._id will be auto-generated by Mongoose if not provided, or used for update if provided
    }

    const wisataBaru = new Wisata({
      nama,
      deskripsi,
      lokasi,
      ticketTypes, // Assign validated ticket types
      kontak,
      jamOperasional,
      kategori,
      fasilitas, // Assuming fasilitas is an array of ObjectIds or handled by schema
      pengelola: assignedPengelolaId,
    });

    await wisataBaru.save();

    // Also, add this new Wisata to the 'tempatWisata' array of the assigned Pengelola
    const pengelolaUser = await User.findById(assignedPengelolaId);
    if (pengelolaUser && !pengelolaUser.tempatWisata.includes(wisataBaru._id)) {
        pengelolaUser.tempatWisata.push(wisataBaru._id);
        await pengelolaUser.save();
    }

    res.status(201).json({ message: 'Wisata berhasil ditambahkan!', data: wisataBaru });
  } catch (error) {
    console.error("Error in tambahWisata:", error);
    res.status(500).json({ message: 'Terjadi kesalahan server!', error: error.message });
  }
};

export const updateWisata = async (req, res) => {
  try {
    const { id } = req.params;
    const wisata = await Wisata.findById(id);

    if (!wisata) return res.status(404).json({ message: 'Wisata tidak ditemukan!' });

    // Allow admin to update any, or pengelola to update their own.
    if (req.user.role !== 'admin' && wisata.pengelola.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Akses ditolak! Anda bukan admin atau pengelola wisata ini.' });
    }

    // Prevent pengelola from changing the 'pengelola' field directly via this general update route
    if (req.user.role === 'pengelola' && req.body.pengelola && req.body.pengelola.toString() !== wisata.pengelola.toString()) {
        return res.status(403).json({ message: 'Pengelola tidak dapat mengubah kepemilikan wisata melalui rute ini. Gunakan rute khusus jika tersedia dan diizinkan.' });
    }

    // If admin is updating and wants to change pengelola, they should use the dedicated route.
    // However, if an admin *is* changing it here, we might allow it, or guide them to the dedicated route.
    // For now, let's assume if 'pengelolaId' is passed by an admin, it's an attempt to change it here,
    // but the dedicated route is preferred. This logic is simplified here.
    // The dedicated 'changeWisataPengelola' handles User model updates.

    // When updating ticketTypes, Mongoose will handle subdocument changes.
    // If req.body.ticketTypes is provided, it will replace the array.
    // Items with existing _ids will be updated, new items without _ids added, old items not present removed.
    // Add validation for incoming ticketTypes in update if necessary
    if (req.body.ticketTypes) {
        if (!Array.isArray(req.body.ticketTypes) || req.body.ticketTypes.length === 0) {
            return res.status(400).json({ message: 'If providing ticketTypes, it must be a non-empty array.' });
        }
        for (const tt of req.body.ticketTypes) {
            if (!tt.name || typeof tt.price !== 'number' || tt.price < 0) {
                return res.status(400).json({ message: 'Each ticket type must have a valid name and non-negative price.' });
            }
        }
    }

    const updatedWisata = await Wisata.findByIdAndUpdate(id, req.body, { new: true }).populate('pengelola', 'nama email');
    res.json({ message: 'Wisata berhasil diperbarui!', data: updatedWisata });
  } catch (error) {
    console.error("Error in updateWisata:", error);
    res.status(500).json({ message: 'Terjadi kesalahan server!', error: error.message });
  }
};

// ðŸ”¹ Hapus wisata (hanya admin atau pemilik)
export const hapusWisata = async (req, res) => {
  try {
    const { id } = req.params;
    const wisata = await Wisata.findById(id);

    if (!wisata) return res.status(404).json({ message: 'Wisata tidak ditemukan!' });

    // Hanya admin atau pemilik wisata yang bisa menghapus
    if (req.user.role !== 'admin' && wisata.pengelola.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Akses ditolak!' });
    }

    const pengelolaId = wisata.pengelola;

    await Wisata.findByIdAndDelete(id);

    // Remove Wisata from the pengelola's list
    if(pengelolaId){
        await User.findByIdAndUpdate(pengelolaId, { $pull: { tempatWisata: id } });
    }

    res.json({ message: 'Wisata berhasil dihapus!' });
  } catch (error) {
    console.error("Error in hapusWisata:", error);
    res.status(500).json({ message: 'Terjadi kesalahan server!', error: error.message });
  }
};

// ðŸ”¹ Tambah gambar ke galeri wisata (hanya pengelola atau admin)
export const tambahGambarGaleri = async (req, res) => {
  try {
    const { id } = req.params; // ID wisata
    const wisata = await Wisata.findById(id);

    if (!wisata) return res.status(404).json({ message: 'Wisata tidak ditemukan!' });

    if (req.user.role !== 'admin' && wisata.pengelola.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Akses ditolak!' });
    }

    if (!req.file) {
        return res.status(400).json({ message: 'Tidak ada file gambar yang diunggah.' });
    }

    const gambarBaru = {
      url: req.file.location, // Assuming multer-s3 is used, which provides 'location'
      // For local storage, it might be: `/uploads/gallery/${req.file.filename}`
      deskripsi: req.body.deskripsi || '',
      uploadedBy: req.user._id,
      status: req.user.role === 'admin' ? 'verified' : 'pending', // Admin uploads are auto-verified
    };

    wisata.galeri.push(gambarBaru);
    await wisata.save();

    const populatedWisata = await Wisata.findById(id).populate('galeri.uploadedBy', 'nama email');
    const newImageResponse = populatedWisata.galeri.find(g => g.url === gambarBaru.url);


    res.status(201).json({ message: 'Gambar berhasil ditambahkan!', data: newImageResponse });
  } catch (error) {
    console.error("Error in tambahGambarGaleri:", error);
    res.status(500).json({ message: 'Terjadi kesalahan server!', error: error.message });
  }
};

// ðŸ”¹ Verifikasi atau tolak gambar galeri (hanya admin)
export const verifikasiGambarGaleri = async (req, res) => {
  try {
    const { wisataId, gambarId } = req.params;
    const { status } = req.body; // 'verified' atau 'rejected'

    if (req.user.role !== 'admin') {
      return res.status(403).json({ message: 'Akses ditolak! Hanya admin yang dapat melakukan verifikasi.' });
    }

    if (!status || !['verified', 'rejected'].includes(status)) {
        return res.status(400).json({ message: 'Status tidak valid. Harus "verified" atau "rejected".' });
    }

    const wisata = await Wisata.findById(wisataId);
    if (!wisata) return res.status(404).json({ message: 'Wisata tidak ditemukan!' });

    const gambar = wisata.galeri.id(gambarId);
    if (!gambar) return res.status(404).json({ message: 'Gambar tidak ditemukan!' });

    gambar.status = status;
    await wisata.save();

    const populatedWisata = await Wisata.findById(wisataId).populate('galeri.uploadedBy', 'nama email');
    const updatedImageResponse = populatedWisata.galeri.id(gambarId);

    res.json({ message: `Gambar berhasil ${status}!`, data: updatedImageResponse });
  } catch (error) {
    console.error("Error in verifikasiGambarGaleri:", error);
    res.status(500).json({ message: 'Terjadi kesalahan server!', error: error.message });
  }
};

// ðŸ”¹ Ambil semua wisata (public, but with different views for admin/pengelola if needed in future)
export const getAllWisata = async (req, res) => {
  try {
    // For now, this is a public route. Filter by status or pengelola can be added.
    const wisataList = await Wisata.find({ 'statusPublikasi': 'published' }) // Example: only show published
        .populate('pengelola', 'nama email')
        .populate('fasilitas'); // Assuming Fasilitas model and refs are set up
    res.json({ data: wisataList });
  } catch (error) {
    console.error("Error in getAllWisata:", error);
    res.status(500).json({ message: 'Terjadi kesalahan server!', error: error.message });
  }
};


// Admin: Get All Wisata (including not published, etc for admin view)
export const adminGetAllWisata = async (req, res) => {
    try {
        // This route is admin only, so show all regardless of statusPublikasi
        const wisataList = await Wisata.find()
            .populate('pengelola', 'nama email')
            .populate('fasilitas');
        res.json({ data: wisataList });
    } catch (error) {
        console.error("Error in adminGetAllWisata:", error);
        res.status(500).json({ message: 'Terjadi kesalahan server!', error: error.message });
    }
};


// ðŸ”¹ Ambil detail wisata berdasarkan ID (public)
export const getWisataById = async (req, res) => {
  try {
    const wisata = await Wisata.findById(req.params.id)
        .populate('pengelola', 'nama email')
        .populate('fasilitas')
        .populate('galeri.uploadedBy', 'nama email'); // Populate uploader details for gallery images

    if (!wisata) return res.status(404).json({ message: 'Wisata tidak ditemukan!' });

    // Optional: If not published and user is not admin/owner, deny access
    // if (wisata.statusPublikasi !== 'published' && (!req.user || (req.user.role !== 'admin' && wisata.pengelola._id.toString() !== req.user._id.toString()))) {
    //    return res.status(404).json({ message: 'Wisata tidak ditemukan atau tidak dipublikasikan.' });
    // }

    res.json({ data: wisata });
  } catch (error) {
    console.error("Error in getWisataById:", error);
    res.status(500).json({ message: 'Terjadi kesalahan server!', error: error.message });
  }
};

// Admin: Change the Pengelola of a Wisata
export const changeWisataPengelola = async (req, res) => {
  try {
    const { id: wisataId } = req.params; // ID of the Wisata
    const { newPengelolaId } = req.body;

    if (!mongoose.Types.ObjectId.isValid(wisataId)) {
      return res.status(400).json({ message: 'Invalid Wisata ID format' });
    }
    if (!mongoose.Types.ObjectId.isValid(newPengelolaId)) {
      return res.status(400).json({ message: 'Invalid New Pengelola ID format' });
    }

    const wisata = await Wisata.findById(wisataId);
    if (!wisata) {
      return res.status(404).json({ message: 'Wisata not found' });
    }

    const oldPengelolaId = wisata.pengelola;

    if (oldPengelolaId && oldPengelolaId.toString() === newPengelolaId) {
        return res.status(400).json({ message: 'New Pengelola is the same as the current one.' });
    }

    const newPengelola = await User.findById(newPengelolaId);
    if (!newPengelola) {
      return res.status(404).json({ message: 'New Pengelola user not found' });
    }
    if (newPengelola.role !== 'pengelola') {
      return res.status(400).json({ message: `User ${newPengelola.nama} does not have the 'pengelola' role.` });
    }

    // Update Wisata's pengelola field
    wisata.pengelola = newPengelolaId;
    await wisata.save();

    // Update old Pengelola's tempatWisata array (remove this wisata)
    if (oldPengelolaId) {
        await User.findByIdAndUpdate(oldPengelolaId, { $pull: { tempatWisata: wisataId } });
    }

    // Update new Pengelola's tempatWisata array (add this wisata)
    if (!newPengelola.tempatWisata.includes(wisataId)) { // Check if it's already there
        await User.findByIdAndUpdate(newPengelolaId, { $addToSet: { tempatWisata: wisataId } });
    }

    const populatedWisata = await Wisata.findById(wisataId).populate('pengelola', 'nama email');

    res.status(200).json({ message: 'Wisata Pengelola updated successfully', data: populatedWisata });

  } catch (error) {
    console.error('Error changing Wisata Pengelola:', error);
    res.status(500).json({ message: 'Server error while changing Wisata Pengelola', error: error.message });
  }
};
